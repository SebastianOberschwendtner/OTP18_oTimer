
OTP18_oTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000104c  000010e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000104c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000238  00800100  00800100  000010e0  2**0
                  ALLOC
  3 .stab         0000288c  00000000  00000000  000010e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001672  00000000  00000000  0000396c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004fde  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004ff0  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00005620  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00005bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00005bdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
       8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
       c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      10:	0c 94 a0 04 	jmp	0x940	; 0x940 <__vector_4>
      14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      2c:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__vector_11>
      30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	23 e0       	ldi	r18, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	a8 33       	cpi	r26, 0x38	; 56
      80:	b2 07       	cpc	r27, r18
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
      84:	0e 94 da 03 	call	0x7b4	; 0x7b4 <main>
      88:	0c 94 24 08 	jmp	0x1048	; 0x1048 <_exit>

0000008c <__bad_interrupt>:
      8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <digit_init>:

/*
 * Initialize digits
 */
void digit_init(void)
{
      90:	cf 93       	push	r28
      92:	df 93       	push	r29
      94:	cd b7       	in	r28, 0x3d	; 61
      96:	de b7       	in	r29, 0x3e	; 62
	//register memory
	digits = ipc_memory_register(sizeof(digit_t),did_DIGIT);
      98:	61 e0       	ldi	r22, 0x01	; 1
      9a:	8d e0       	ldi	r24, 0x0D	; 13
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	0e 94 86 03 	call	0x70c	; 0x70c <ipc_memory_register>
      a2:	90 93 09 01 	sts	0x0109, r25
      a6:	80 93 08 01 	sts	0x0108, r24
};
      aa:	00 00       	nop
      ac:	df 91       	pop	r29
      ae:	cf 91       	pop	r28
      b0:	08 95       	ret

000000b2 <char2digit>:

/*
 * write a char to the display
 */
void char2digit(unsigned char data)
{
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	1f 92       	push	r1
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
      bc:	89 83       	std	Y+1, r24	; 0x01
	//A char can never reach 1000
	digits->value[0] = 0;
      be:	80 91 08 01 	lds	r24, 0x0108
      c2:	90 91 09 01 	lds	r25, 0x0109
      c6:	fc 01       	movw	r30, r24
      c8:	10 82       	st	Z, r1
	digits->show[0] 	= 0;
      ca:	80 91 08 01 	lds	r24, 0x0108
      ce:	90 91 09 01 	lds	r25, 0x0109
      d2:	fc 01       	movw	r30, r24
      d4:	10 86       	std	Z+8, r1	; 0x08

	//get the hundreds
	digits->value[1] = data/100;
      d6:	80 91 08 01 	lds	r24, 0x0108
      da:	90 91 09 01 	lds	r25, 0x0109
      de:	39 81       	ldd	r19, Y+1	; 0x01
      e0:	29 e2       	ldi	r18, 0x29	; 41
      e2:	32 9f       	mul	r19, r18
      e4:	21 2d       	mov	r18, r1
      e6:	11 24       	eor	r1, r1
      e8:	22 95       	swap	r18
      ea:	2f 70       	andi	r18, 0x0F	; 15
      ec:	fc 01       	movw	r30, r24
      ee:	21 83       	std	Z+1, r18	; 0x01
	digits->show[1] 	= 1;
      f0:	80 91 08 01 	lds	r24, 0x0108
      f4:	90 91 09 01 	lds	r25, 0x0109
      f8:	21 e0       	ldi	r18, 0x01	; 1
      fa:	fc 01       	movw	r30, r24
      fc:	21 87       	std	Z+9, r18	; 0x09

	//get the tens, subtract the known hundreds and divide by 10
	data = data - (digits->value[1]*100);
      fe:	80 91 08 01 	lds	r24, 0x0108
     102:	90 91 09 01 	lds	r25, 0x0109
     106:	fc 01       	movw	r30, r24
     108:	91 81       	ldd	r25, Z+1	; 0x01
     10a:	8c e9       	ldi	r24, 0x9C	; 156
     10c:	98 9f       	mul	r25, r24
     10e:	80 2d       	mov	r24, r0
     110:	11 24       	eor	r1, r1
     112:	99 81       	ldd	r25, Y+1	; 0x01
     114:	89 0f       	add	r24, r25
     116:	89 83       	std	Y+1, r24	; 0x01
	digits->value[2] = data/10;
     118:	80 91 08 01 	lds	r24, 0x0108
     11c:	90 91 09 01 	lds	r25, 0x0109
     120:	39 81       	ldd	r19, Y+1	; 0x01
     122:	2d ec       	ldi	r18, 0xCD	; 205
     124:	32 9f       	mul	r19, r18
     126:	21 2d       	mov	r18, r1
     128:	11 24       	eor	r1, r1
     12a:	26 95       	lsr	r18
     12c:	26 95       	lsr	r18
     12e:	26 95       	lsr	r18
     130:	fc 01       	movw	r30, r24
     132:	22 83       	std	Z+2, r18	; 0x02
	digits->show[2] 	= 1;
     134:	80 91 08 01 	lds	r24, 0x0108
     138:	90 91 09 01 	lds	r25, 0x0109
     13c:	21 e0       	ldi	r18, 0x01	; 1
     13e:	fc 01       	movw	r30, r24
     140:	22 87       	std	Z+10, r18	; 0x0a

	//get the ones, subtract the known tens and divide by 10
	data = data - (digits->value[2]*10);
     142:	80 91 08 01 	lds	r24, 0x0108
     146:	90 91 09 01 	lds	r25, 0x0109
     14a:	fc 01       	movw	r30, r24
     14c:	82 81       	ldd	r24, Z+2	; 0x02
     14e:	88 0f       	add	r24, r24
     150:	98 2f       	mov	r25, r24
     152:	99 0f       	add	r25, r25
     154:	99 0f       	add	r25, r25
     156:	89 0f       	add	r24, r25
     158:	81 95       	neg	r24
     15a:	99 81       	ldd	r25, Y+1	; 0x01
     15c:	89 0f       	add	r24, r25
     15e:	89 83       	std	Y+1, r24	; 0x01
	digits->value[3] = data;
     160:	80 91 08 01 	lds	r24, 0x0108
     164:	90 91 09 01 	lds	r25, 0x0109
     168:	29 81       	ldd	r18, Y+1	; 0x01
     16a:	fc 01       	movw	r30, r24
     16c:	23 83       	std	Z+3, r18	; 0x03
	digits->show[3] 	= 1;
     16e:	80 91 08 01 	lds	r24, 0x0108
     172:	90 91 09 01 	lds	r25, 0x0109
     176:	21 e0       	ldi	r18, 0x01	; 1
     178:	fc 01       	movw	r30, r24
     17a:	23 87       	std	Z+11, r18	; 0x0b
};
     17c:	00 00       	nop
     17e:	0f 90       	pop	r0
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <int2digit>:

/*
 * write an int to the display
 */
void int2digit(unsigned int data)
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	00 d0       	rcall	.+0      	; 0x18c <int2digit+0x6>
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
     190:	9a 83       	std	Y+2, r25	; 0x02
     192:	89 83       	std	Y+1, r24	; 0x01
	//get the thousands
	digits->value[0] = data/1000;
     194:	40 91 08 01 	lds	r20, 0x0108
     198:	50 91 09 01 	lds	r21, 0x0109
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	9a 81       	ldd	r25, Y+2	; 0x02
     1a0:	96 95       	lsr	r25
     1a2:	87 95       	ror	r24
     1a4:	96 95       	lsr	r25
     1a6:	87 95       	ror	r24
     1a8:	96 95       	lsr	r25
     1aa:	87 95       	ror	r24
     1ac:	9c 01       	movw	r18, r24
     1ae:	a5 ec       	ldi	r26, 0xC5	; 197
     1b0:	b0 e2       	ldi	r27, 0x20	; 32
     1b2:	0e 94 15 08 	call	0x102a	; 0x102a <__umulhisi3>
     1b6:	92 95       	swap	r25
     1b8:	82 95       	swap	r24
     1ba:	8f 70       	andi	r24, 0x0F	; 15
     1bc:	89 27       	eor	r24, r25
     1be:	9f 70       	andi	r25, 0x0F	; 15
     1c0:	89 27       	eor	r24, r25
     1c2:	fa 01       	movw	r30, r20
     1c4:	80 83       	st	Z, r24
	digits->show[0]  = digits->value[0];
     1c6:	80 91 08 01 	lds	r24, 0x0108
     1ca:	90 91 09 01 	lds	r25, 0x0109
     1ce:	20 91 08 01 	lds	r18, 0x0108
     1d2:	30 91 09 01 	lds	r19, 0x0109
     1d6:	f9 01       	movw	r30, r18
     1d8:	20 81       	ld	r18, Z
     1da:	fc 01       	movw	r30, r24
     1dc:	20 87       	std	Z+8, r18	; 0x08

	//get the hundreds
	data = data - (digits->value[0]*1000);
     1de:	80 91 08 01 	lds	r24, 0x0108
     1e2:	90 91 09 01 	lds	r25, 0x0109
     1e6:	fc 01       	movw	r30, r24
     1e8:	80 81       	ld	r24, Z
     1ea:	28 2f       	mov	r18, r24
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	88 e1       	ldi	r24, 0x18	; 24
     1f0:	9c ef       	ldi	r25, 0xFC	; 252
     1f2:	28 9f       	mul	r18, r24
     1f4:	a0 01       	movw	r20, r0
     1f6:	29 9f       	mul	r18, r25
     1f8:	50 0d       	add	r21, r0
     1fa:	38 9f       	mul	r19, r24
     1fc:	50 0d       	add	r21, r0
     1fe:	11 24       	eor	r1, r1
     200:	9a 01       	movw	r18, r20
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	9a 81       	ldd	r25, Y+2	; 0x02
     206:	82 0f       	add	r24, r18
     208:	93 1f       	adc	r25, r19
     20a:	9a 83       	std	Y+2, r25	; 0x02
     20c:	89 83       	std	Y+1, r24	; 0x01
	digits->value[1] = data/100;
     20e:	40 91 08 01 	lds	r20, 0x0108
     212:	50 91 09 01 	lds	r21, 0x0109
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	9a 81       	ldd	r25, Y+2	; 0x02
     21a:	96 95       	lsr	r25
     21c:	87 95       	ror	r24
     21e:	96 95       	lsr	r25
     220:	87 95       	ror	r24
     222:	9c 01       	movw	r18, r24
     224:	ab e7       	ldi	r26, 0x7B	; 123
     226:	b4 e1       	ldi	r27, 0x14	; 20
     228:	0e 94 15 08 	call	0x102a	; 0x102a <__umulhisi3>
     22c:	96 95       	lsr	r25
     22e:	87 95       	ror	r24
     230:	fa 01       	movw	r30, r20
     232:	81 83       	std	Z+1, r24	; 0x01
	digits->show[1]  = 1;
     234:	80 91 08 01 	lds	r24, 0x0108
     238:	90 91 09 01 	lds	r25, 0x0109
     23c:	21 e0       	ldi	r18, 0x01	; 1
     23e:	fc 01       	movw	r30, r24
     240:	21 87       	std	Z+9, r18	; 0x09

	//get the tens, subtract the known hundreds and divide by 10
	data = data - (digits->value[1]*100);
     242:	80 91 08 01 	lds	r24, 0x0108
     246:	90 91 09 01 	lds	r25, 0x0109
     24a:	fc 01       	movw	r30, r24
     24c:	81 81       	ldd	r24, Z+1	; 0x01
     24e:	88 2f       	mov	r24, r24
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	4c e9       	ldi	r20, 0x9C	; 156
     254:	bc 01       	movw	r22, r24
     256:	46 03       	mulsu	r20, r22
     258:	90 01       	movw	r18, r0
     25a:	47 9f       	mul	r20, r23
     25c:	30 0d       	add	r19, r0
     25e:	11 24       	eor	r1, r1
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	9a 81       	ldd	r25, Y+2	; 0x02
     264:	82 0f       	add	r24, r18
     266:	93 1f       	adc	r25, r19
     268:	9a 83       	std	Y+2, r25	; 0x02
     26a:	89 83       	std	Y+1, r24	; 0x01
	digits->value[2] = data/10;
     26c:	40 91 08 01 	lds	r20, 0x0108
     270:	50 91 09 01 	lds	r21, 0x0109
     274:	89 81       	ldd	r24, Y+1	; 0x01
     276:	9a 81       	ldd	r25, Y+2	; 0x02
     278:	9c 01       	movw	r18, r24
     27a:	ad ec       	ldi	r26, 0xCD	; 205
     27c:	bc ec       	ldi	r27, 0xCC	; 204
     27e:	0e 94 15 08 	call	0x102a	; 0x102a <__umulhisi3>
     282:	96 95       	lsr	r25
     284:	87 95       	ror	r24
     286:	96 95       	lsr	r25
     288:	87 95       	ror	r24
     28a:	96 95       	lsr	r25
     28c:	87 95       	ror	r24
     28e:	fa 01       	movw	r30, r20
     290:	82 83       	std	Z+2, r24	; 0x02
	digits->show[2]  = 1;
     292:	80 91 08 01 	lds	r24, 0x0108
     296:	90 91 09 01 	lds	r25, 0x0109
     29a:	21 e0       	ldi	r18, 0x01	; 1
     29c:	fc 01       	movw	r30, r24
     29e:	22 87       	std	Z+10, r18	; 0x0a

	//get the ones, subtract the known tens and divide by 10
	data = data - (digits->value[2]*10);
     2a0:	80 91 08 01 	lds	r24, 0x0108
     2a4:	90 91 09 01 	lds	r25, 0x0109
     2a8:	fc 01       	movw	r30, r24
     2aa:	82 81       	ldd	r24, Z+2	; 0x02
     2ac:	88 2f       	mov	r24, r24
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	46 ef       	ldi	r20, 0xF6	; 246
     2b2:	bc 01       	movw	r22, r24
     2b4:	46 03       	mulsu	r20, r22
     2b6:	90 01       	movw	r18, r0
     2b8:	47 9f       	mul	r20, r23
     2ba:	30 0d       	add	r19, r0
     2bc:	11 24       	eor	r1, r1
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	9a 81       	ldd	r25, Y+2	; 0x02
     2c2:	82 0f       	add	r24, r18
     2c4:	93 1f       	adc	r25, r19
     2c6:	9a 83       	std	Y+2, r25	; 0x02
     2c8:	89 83       	std	Y+1, r24	; 0x01
	digits->value[3] = data;
     2ca:	80 91 08 01 	lds	r24, 0x0108
     2ce:	90 91 09 01 	lds	r25, 0x0109
     2d2:	29 81       	ldd	r18, Y+1	; 0x01
     2d4:	fc 01       	movw	r30, r24
     2d6:	23 83       	std	Z+3, r18	; 0x03
	digits->show[3]  = 1;
     2d8:	80 91 08 01 	lds	r24, 0x0108
     2dc:	90 91 09 01 	lds	r25, 0x0109
     2e0:	21 e0       	ldi	r18, 0x01	; 1
     2e2:	fc 01       	movw	r30, r24
     2e4:	23 87       	std	Z+11, r18	; 0x0b
};
     2e6:	00 00       	nop
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <display_digit>:

/*
 * Display the specified digit
 */
void display_digit(unsigned char digitnumber)
{
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <display_digit+0x6>
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	8a 83       	std	Y+2, r24	; 0x02
	//Get the digit to display
	unsigned char digit = digits->value[digitnumber];
     2fe:	20 91 08 01 	lds	r18, 0x0108
     302:	30 91 09 01 	lds	r19, 0x0109
     306:	8a 81       	ldd	r24, Y+2	; 0x02
     308:	88 2f       	mov	r24, r24
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	82 0f       	add	r24, r18
     30e:	93 1f       	adc	r25, r19
     310:	fc 01       	movw	r30, r24
     312:	80 81       	ld	r24, Z
     314:	89 83       	std	Y+1, r24	; 0x01

	//set the output to the BCD converter, only the first four bits of the port are changed
	PORTB = (PORTB & 0xF0) | (digit & 0x0F);
     316:	85 e2       	ldi	r24, 0x25	; 37
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	25 e2       	ldi	r18, 0x25	; 37
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	f9 01       	movw	r30, r18
     320:	20 81       	ld	r18, Z
     322:	32 2f       	mov	r19, r18
     324:	30 7f       	andi	r19, 0xF0	; 240
     326:	29 81       	ldd	r18, Y+1	; 0x01
     328:	2f 70       	andi	r18, 0x0F	; 15
     32a:	23 2b       	or	r18, r19
     32c:	fc 01       	movw	r30, r24
     32e:	20 83       	st	Z, r18

	//enable the corresponding fet, only the fet pins are changed
	PORTD = (PORTD & 0x07) | (1<<(digitnumber+3));
     330:	8b e2       	ldi	r24, 0x2B	; 43
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	2b e2       	ldi	r18, 0x2B	; 43
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	f9 01       	movw	r30, r18
     33a:	20 81       	ld	r18, Z
     33c:	62 2f       	mov	r22, r18
     33e:	67 70       	andi	r22, 0x07	; 7
     340:	2a 81       	ldd	r18, Y+2	; 0x02
     342:	22 2f       	mov	r18, r18
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	a9 01       	movw	r20, r18
     348:	4d 5f       	subi	r20, 0xFD	; 253
     34a:	5f 4f       	sbci	r21, 0xFF	; 255
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	02 c0       	rjmp	.+4      	; 0x356 <display_digit+0x64>
     352:	22 0f       	add	r18, r18
     354:	33 1f       	adc	r19, r19
     356:	4a 95       	dec	r20
     358:	e2 f7       	brpl	.-8      	; 0x352 <display_digit+0x60>
     35a:	26 2b       	or	r18, r22
     35c:	fc 01       	movw	r30, r24
     35e:	20 83       	st	Z, r18

	//set the state of the dot
	if(digits->dot[digitnumber])
     360:	20 91 08 01 	lds	r18, 0x0108
     364:	30 91 09 01 	lds	r19, 0x0109
     368:	8a 81       	ldd	r24, Y+2	; 0x02
     36a:	88 2f       	mov	r24, r24
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	82 0f       	add	r24, r18
     370:	93 1f       	adc	r25, r19
     372:	04 96       	adiw	r24, 0x04	; 4
     374:	fc 01       	movw	r30, r24
     376:	80 81       	ld	r24, Z
     378:	88 23       	and	r24, r24
     37a:	51 f0       	breq	.+20     	; 0x390 <display_digit+0x9e>
		PORTD |= PIN_DOT;
     37c:	8b e2       	ldi	r24, 0x2B	; 43
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	2b e2       	ldi	r18, 0x2B	; 43
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	f9 01       	movw	r30, r18
     386:	20 81       	ld	r18, Z
     388:	21 60       	ori	r18, 0x01	; 1
     38a:	fc 01       	movw	r30, r24
     38c:	20 83       	st	Z, r18
     38e:	09 c0       	rjmp	.+18     	; 0x3a2 <display_digit+0xb0>
	else
		PORTD &= ~PIN_DOT;
     390:	8b e2       	ldi	r24, 0x2B	; 43
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	2b e2       	ldi	r18, 0x2B	; 43
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	f9 01       	movw	r30, r18
     39a:	20 81       	ld	r18, Z
     39c:	2e 7f       	andi	r18, 0xFE	; 254
     39e:	fc 01       	movw	r30, r24
     3a0:	20 83       	st	Z, r18

	//decide whether to show the current digit
	if(digits->show[digitnumber])
     3a2:	20 91 08 01 	lds	r18, 0x0108
     3a6:	30 91 09 01 	lds	r19, 0x0109
     3aa:	8a 81       	ldd	r24, Y+2	; 0x02
     3ac:	88 2f       	mov	r24, r24
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	82 0f       	add	r24, r18
     3b2:	93 1f       	adc	r25, r19
     3b4:	08 96       	adiw	r24, 0x08	; 8
     3b6:	fc 01       	movw	r30, r24
     3b8:	80 81       	ld	r24, Z
     3ba:	88 23       	and	r24, r24
     3bc:	51 f0       	breq	.+20     	; 0x3d2 <display_digit+0xe0>
		PORTD |= PIN_BLACK;
     3be:	8b e2       	ldi	r24, 0x2B	; 43
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	2b e2       	ldi	r18, 0x2B	; 43
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	f9 01       	movw	r30, r18
     3c8:	20 81       	ld	r18, Z
     3ca:	20 68       	ori	r18, 0x80	; 128
     3cc:	fc 01       	movw	r30, r24
     3ce:	20 83       	st	Z, r18
	else
		PORTD &= ~PIN_BLACK;
};
     3d0:	09 c0       	rjmp	.+18     	; 0x3e4 <display_digit+0xf2>

	//decide whether to show the current digit
	if(digits->show[digitnumber])
		PORTD |= PIN_BLACK;
	else
		PORTD &= ~PIN_BLACK;
     3d2:	8b e2       	ldi	r24, 0x2B	; 43
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	2b e2       	ldi	r18, 0x2B	; 43
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	f9 01       	movw	r30, r18
     3dc:	20 81       	ld	r18, Z
     3de:	2f 77       	andi	r18, 0x7F	; 127
     3e0:	fc 01       	movw	r30, r24
     3e2:	20 83       	st	Z, r18
};
     3e4:	00 00       	nop
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <digit_draw>:
/*
 * display every digit of the time, multiplexed
 * has to be called multiple time to display all digits
 */
void digit_draw(void)
{
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
	//display the current digit and increase the digit counter
	display_digit(current_digit++);
     3f8:	80 91 00 01 	lds	r24, 0x0100
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	98 0f       	add	r25, r24
     400:	90 93 00 01 	sts	0x0100, r25
     404:	0e 94 79 01 	call	0x2f2	; 0x2f2 <display_digit>
	//when all digits are displayed, reset the counter
	if(current_digit>3)
     408:	80 91 00 01 	lds	r24, 0x0100
     40c:	84 30       	cpi	r24, 0x04	; 4
     40e:	10 f0       	brcs	.+4      	; 0x414 <digit_draw+0x24>
		current_digit = 0;
     410:	10 92 00 01 	sts	0x0100, r1
};
     414:	00 00       	nop
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <set_dot>:

/*
 * set the state of the dots
 */
void set_dot(unsigned char dot, unsigned char state)
{
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	00 d0       	rcall	.+0      	; 0x422 <set_dot+0x6>
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
     426:	89 83       	std	Y+1, r24	; 0x01
     428:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
     42a:	8a 81       	ldd	r24, Y+2	; 0x02
     42c:	88 2f       	mov	r24, r24
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	81 30       	cpi	r24, 0x01	; 1
     432:	91 05       	cpc	r25, r1
     434:	31 f0       	breq	.+12     	; 0x442 <set_dot+0x26>
     436:	83 30       	cpi	r24, 0x03	; 3
     438:	91 05       	cpc	r25, r1
     43a:	f1 f0       	breq	.+60     	; 0x478 <set_dot+0x5c>
     43c:	89 2b       	or	r24, r25
     43e:	79 f0       	breq	.+30     	; 0x45e <set_dot+0x42>
		break;
	case TOGGLE:
			digits->dot[dot] ^= ON;
		break;
	default:
		break;
     440:	37 c0       	rjmp	.+110    	; 0x4b0 <set_dot+0x94>
void set_dot(unsigned char dot, unsigned char state)
{
	switch(state)
	{
	case ON:
		digits->dot[dot] = ON;
     442:	20 91 08 01 	lds	r18, 0x0108
     446:	30 91 09 01 	lds	r19, 0x0109
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	88 2f       	mov	r24, r24
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	82 0f       	add	r24, r18
     452:	93 1f       	adc	r25, r19
     454:	04 96       	adiw	r24, 0x04	; 4
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	fc 01       	movw	r30, r24
     45a:	20 83       	st	Z, r18
		break;
     45c:	29 c0       	rjmp	.+82     	; 0x4b0 <set_dot+0x94>
	case OFF:
		digits->dot[dot] = OFF;
     45e:	20 91 08 01 	lds	r18, 0x0108
     462:	30 91 09 01 	lds	r19, 0x0109
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	88 2f       	mov	r24, r24
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	82 0f       	add	r24, r18
     46e:	93 1f       	adc	r25, r19
     470:	04 96       	adiw	r24, 0x04	; 4
     472:	fc 01       	movw	r30, r24
     474:	10 82       	st	Z, r1
		break;
     476:	1c c0       	rjmp	.+56     	; 0x4b0 <set_dot+0x94>
	case TOGGLE:
			digits->dot[dot] ^= ON;
     478:	20 91 08 01 	lds	r18, 0x0108
     47c:	30 91 09 01 	lds	r19, 0x0109
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	88 2f       	mov	r24, r24
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	60 91 08 01 	lds	r22, 0x0108
     48a:	70 91 09 01 	lds	r23, 0x0109
     48e:	49 81       	ldd	r20, Y+1	; 0x01
     490:	44 2f       	mov	r20, r20
     492:	50 e0       	ldi	r21, 0x00	; 0
     494:	46 0f       	add	r20, r22
     496:	57 1f       	adc	r21, r23
     498:	4c 5f       	subi	r20, 0xFC	; 252
     49a:	5f 4f       	sbci	r21, 0xFF	; 255
     49c:	fa 01       	movw	r30, r20
     49e:	50 81       	ld	r21, Z
     4a0:	41 e0       	ldi	r20, 0x01	; 1
     4a2:	45 27       	eor	r20, r21
     4a4:	82 0f       	add	r24, r18
     4a6:	93 1f       	adc	r25, r19
     4a8:	04 96       	adiw	r24, 0x04	; 4
     4aa:	fc 01       	movw	r30, r24
     4ac:	40 83       	st	Z, r20
		break;
     4ae:	00 00       	nop
	default:
		break;
	}
};
     4b0:	00 00       	nop
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <input_init>:

/*
 * initialize the input peripherals
 */
void input_init(void)
{
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
	//Select AREF as reference voltage, left adjusted result
	ADMUX = (1<<ADLAR);
     4c4:	8c e7       	ldi	r24, 0x7C	; 124
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	20 e2       	ldi	r18, 0x20	; 32
     4ca:	fc 01       	movw	r30, r24
     4cc:	20 83       	st	Z, r18

	//Select prescaler for ADC: 128
	ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     4ce:	8a e7       	ldi	r24, 0x7A	; 122
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	27 e0       	ldi	r18, 0x07	; 7
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 83       	st	Z, r18

	//Disable the digital input buffer for PC0 and PC1
	DIDR0 = (1<<ADC1D) | (1<<ADC0D);
     4d8:	8e e7       	ldi	r24, 0x7E	; 126
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	23 e0       	ldi	r18, 0x03	; 3
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18

	//Enable the ADC
	input_set_adc(ON);
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	0e 94 9a 02 	call	0x534	; 0x534 <input_set_adc>

	//Register the memory
	adc = ipc_memory_register(sizeof(adc_t),did_INPUT);
     4e8:	62 e0       	ldi	r22, 0x02	; 2
     4ea:	85 e0       	ldi	r24, 0x05	; 5
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 86 03 	call	0x70c	; 0x70c <ipc_memory_register>
     4f2:	90 93 0b 01 	sts	0x010B, r25
     4f6:	80 93 0a 01 	sts	0x010A, r24

	//intialize the adc buffer
	adc->buffer	 	= 0;
     4fa:	80 91 0a 01 	lds	r24, 0x010A
     4fe:	90 91 0b 01 	lds	r25, 0x010B
     502:	fc 01       	movw	r30, r24
     504:	11 82       	std	Z+1, r1	; 0x01
     506:	10 82       	st	Z, r1
	adc->value[0] 	= 0;
     508:	80 91 0a 01 	lds	r24, 0x010A
     50c:	90 91 0b 01 	lds	r25, 0x010B
     510:	fc 01       	movw	r30, r24
     512:	12 82       	std	Z+2, r1	; 0x02
	adc->value[1]	= 0;
     514:	80 91 0a 01 	lds	r24, 0x010A
     518:	90 91 0b 01 	lds	r25, 0x010B
     51c:	fc 01       	movw	r30, r24
     51e:	13 82       	std	Z+3, r1	; 0x03
	adc->sample 	= 0;
     520:	80 91 0a 01 	lds	r24, 0x010A
     524:	90 91 0b 01 	lds	r25, 0x010B
     528:	fc 01       	movw	r30, r24
     52a:	14 82       	std	Z+4, r1	; 0x04
};
     52c:	00 00       	nop
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <input_set_adc>:

/*
 * Set the state of the ADC
 */
void input_set_adc(unsigned char state)
{
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	1f 92       	push	r1
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	89 83       	std	Y+1, r24	; 0x01
	if(state == ON)
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	81 30       	cpi	r24, 0x01	; 1
     544:	51 f4       	brne	.+20     	; 0x55a <input_set_adc+0x26>
		ADCSRA |= (1<<ADEN);
     546:	8a e7       	ldi	r24, 0x7A	; 122
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	2a e7       	ldi	r18, 0x7A	; 122
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	f9 01       	movw	r30, r18
     550:	20 81       	ld	r18, Z
     552:	20 68       	ori	r18, 0x80	; 128
     554:	fc 01       	movw	r30, r24
     556:	20 83       	st	Z, r18
	else if(state == OFF)
		ADCSRA &= ~(1<<ADEN);
};
     558:	0c c0       	rjmp	.+24     	; 0x572 <input_set_adc+0x3e>
 */
void input_set_adc(unsigned char state)
{
	if(state == ON)
		ADCSRA |= (1<<ADEN);
	else if(state == OFF)
     55a:	89 81       	ldd	r24, Y+1	; 0x01
     55c:	88 23       	and	r24, r24
     55e:	49 f4       	brne	.+18     	; 0x572 <input_set_adc+0x3e>
		ADCSRA &= ~(1<<ADEN);
     560:	8a e7       	ldi	r24, 0x7A	; 122
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	2a e7       	ldi	r18, 0x7A	; 122
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	f9 01       	movw	r30, r18
     56a:	20 81       	ld	r18, Z
     56c:	2f 77       	andi	r18, 0x7F	; 127
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
};
     572:	00 00       	nop
     574:	0f 90       	pop	r0
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <input_set_pin>:
/*
 * Set the input to be sampled
 */
void input_set_pin(unsigned char pinnumber)
{
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	1f 92       	push	r1
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
     586:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & 0xE0) | (pinnumber & 0x0F);
     588:	8c e7       	ldi	r24, 0x7C	; 124
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	2c e7       	ldi	r18, 0x7C	; 124
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	f9 01       	movw	r30, r18
     592:	20 81       	ld	r18, Z
     594:	32 2f       	mov	r19, r18
     596:	30 7e       	andi	r19, 0xE0	; 224
     598:	29 81       	ldd	r18, Y+1	; 0x01
     59a:	2f 70       	andi	r18, 0x0F	; 15
     59c:	23 2b       	or	r18, r19
     59e:	fc 01       	movw	r30, r24
     5a0:	20 83       	st	Z, r18
};
     5a2:	00 00       	nop
     5a4:	0f 90       	pop	r0
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <input_sample>:
 * perform adc conversion, has to be called twice.
 * the first time the conversion is started, the second time the result is returned.
 * After that every call gives the last conversion result.
 */
void input_sample(void)
{
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
	//read the result, when it s available
	if(ADC_FINISHED)
     5b4:	8a e7       	ldi	r24, 0x7A	; 122
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	fc 01       	movw	r30, r24
     5ba:	80 81       	ld	r24, Z
     5bc:	88 2f       	mov	r24, r24
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	80 71       	andi	r24, 0x10	; 16
     5c2:	99 27       	eor	r25, r25
     5c4:	89 2b       	or	r24, r25
     5c6:	09 f4       	brne	.+2      	; 0x5ca <input_sample+0x1e>
     5c8:	90 c0       	rjmp	.+288    	; 0x6ea <input_sample+0x13e>
	{
		//clear the flag and read the result
		ADCSRA |= (1<<ADIF);
     5ca:	8a e7       	ldi	r24, 0x7A	; 122
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	2a e7       	ldi	r18, 0x7A	; 122
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	f9 01       	movw	r30, r18
     5d4:	20 81       	ld	r18, Z
     5d6:	20 61       	ori	r18, 0x10	; 16
     5d8:	fc 01       	movw	r30, r24
     5da:	20 83       	st	Z, r18

		//update the buffer and increase the sample count
		//only the 8-bit mode of the adc is used.
		adc->buffer += ADCH;
     5dc:	89 e7       	ldi	r24, 0x79	; 121
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	fc 01       	movw	r30, r24
     5e2:	60 81       	ld	r22, Z
     5e4:	80 91 0a 01 	lds	r24, 0x010A
     5e8:	90 91 0b 01 	lds	r25, 0x010B
     5ec:	20 91 0a 01 	lds	r18, 0x010A
     5f0:	30 91 0b 01 	lds	r19, 0x010B
     5f4:	f9 01       	movw	r30, r18
     5f6:	40 81       	ld	r20, Z
     5f8:	51 81       	ldd	r21, Z+1	; 0x01
     5fa:	26 2f       	mov	r18, r22
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	24 0f       	add	r18, r20
     600:	35 1f       	adc	r19, r21
     602:	fc 01       	movw	r30, r24
     604:	31 83       	std	Z+1, r19	; 0x01
     606:	20 83       	st	Z, r18
		adc->sample++;
     608:	80 91 0a 01 	lds	r24, 0x010A
     60c:	90 91 0b 01 	lds	r25, 0x010B
     610:	fc 01       	movw	r30, r24
     612:	24 81       	ldd	r18, Z+4	; 0x04
     614:	2f 5f       	subi	r18, 0xFF	; 255
     616:	fc 01       	movw	r30, r24
     618:	24 83       	std	Z+4, r18	; 0x04

		//when the target number of samples is reached, update the value
		if(adc->sample >= NUMBER_AVERAGES_ADC)
     61a:	80 91 0a 01 	lds	r24, 0x010A
     61e:	90 91 0b 01 	lds	r25, 0x010B
     622:	fc 01       	movw	r30, r24
     624:	84 81       	ldd	r24, Z+4	; 0x04
     626:	84 31       	cpi	r24, 0x14	; 20
     628:	08 f4       	brcc	.+2      	; 0x62c <input_sample+0x80>
     62a:	5f c0       	rjmp	.+190    	; 0x6ea <input_sample+0x13e>
		{
			adc->sample = 0;
     62c:	80 91 0a 01 	lds	r24, 0x010A
     630:	90 91 0b 01 	lds	r25, 0x010B
     634:	fc 01       	movw	r30, r24
     636:	14 82       	std	Z+4, r1	; 0x04
			adc->buffer /= NUMBER_AVERAGES_ADC;
     638:	40 91 0a 01 	lds	r20, 0x010A
     63c:	50 91 0b 01 	lds	r21, 0x010B
     640:	80 91 0a 01 	lds	r24, 0x010A
     644:	90 91 0b 01 	lds	r25, 0x010B
     648:	fc 01       	movw	r30, r24
     64a:	80 81       	ld	r24, Z
     64c:	91 81       	ldd	r25, Z+1	; 0x01
     64e:	9c 01       	movw	r18, r24
     650:	ad ec       	ldi	r26, 0xCD	; 205
     652:	bc ec       	ldi	r27, 0xCC	; 204
     654:	0e 94 15 08 	call	0x102a	; 0x102a <__umulhisi3>
     658:	92 95       	swap	r25
     65a:	82 95       	swap	r24
     65c:	8f 70       	andi	r24, 0x0F	; 15
     65e:	89 27       	eor	r24, r25
     660:	9f 70       	andi	r25, 0x0F	; 15
     662:	89 27       	eor	r24, r25
     664:	fa 01       	movw	r30, r20
     666:	91 83       	std	Z+1, r25	; 0x01
     668:	80 83       	st	Z, r24

			//check which input was sampled
			if(ADMUX & 1)
     66a:	8c e7       	ldi	r24, 0x7C	; 124
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	fc 01       	movw	r30, r24
     670:	80 81       	ld	r24, Z
     672:	88 2f       	mov	r24, r24
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	81 70       	andi	r24, 0x01	; 1
     678:	99 27       	eor	r25, r25
     67a:	89 2b       	or	r24, r25
     67c:	c1 f0       	breq	.+48     	; 0x6ae <input_sample+0x102>
			{
				adc->value[1] = (((unsigned char)adc->buffer)>>3); //Divide by 8, to get 31 poti positions
     67e:	80 91 0a 01 	lds	r24, 0x010A
     682:	90 91 0b 01 	lds	r25, 0x010B
     686:	20 91 0a 01 	lds	r18, 0x010A
     68a:	30 91 0b 01 	lds	r19, 0x010B
     68e:	f9 01       	movw	r30, r18
     690:	20 81       	ld	r18, Z
     692:	31 81       	ldd	r19, Z+1	; 0x01
     694:	33 27       	eor	r19, r19
     696:	35 95       	asr	r19
     698:	27 95       	ror	r18
     69a:	35 95       	asr	r19
     69c:	27 95       	ror	r18
     69e:	35 95       	asr	r19
     6a0:	27 95       	ror	r18
     6a2:	fc 01       	movw	r30, r24
     6a4:	23 83       	std	Z+3, r18	; 0x03
				input_set_pin(0);
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 be 02 	call	0x57c	; 0x57c <input_set_pin>
     6ac:	17 c0       	rjmp	.+46     	; 0x6dc <input_sample+0x130>
			}
			else
			{
				adc->value[0] = (((unsigned char)adc->buffer)>>3); //Divide by 8, to get 31 poti positions
     6ae:	80 91 0a 01 	lds	r24, 0x010A
     6b2:	90 91 0b 01 	lds	r25, 0x010B
     6b6:	20 91 0a 01 	lds	r18, 0x010A
     6ba:	30 91 0b 01 	lds	r19, 0x010B
     6be:	f9 01       	movw	r30, r18
     6c0:	20 81       	ld	r18, Z
     6c2:	31 81       	ldd	r19, Z+1	; 0x01
     6c4:	33 27       	eor	r19, r19
     6c6:	35 95       	asr	r19
     6c8:	27 95       	ror	r18
     6ca:	35 95       	asr	r19
     6cc:	27 95       	ror	r18
     6ce:	35 95       	asr	r19
     6d0:	27 95       	ror	r18
     6d2:	fc 01       	movw	r30, r24
     6d4:	22 83       	std	Z+2, r18	; 0x02
				input_set_pin(1);
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	0e 94 be 02 	call	0x57c	; 0x57c <input_set_pin>
			}
			adc->buffer = 0;
     6dc:	80 91 0a 01 	lds	r24, 0x010A
     6e0:	90 91 0b 01 	lds	r25, 0x010B
     6e4:	fc 01       	movw	r30, r24
     6e6:	11 82       	std	Z+1, r1	; 0x01
     6e8:	10 82       	st	Z, r1
		}
	}

	//when no conversion is ongoing, start a conversion
	if(~ADC_RUNNING)
     6ea:	8a e7       	ldi	r24, 0x7A	; 122
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	fc 01       	movw	r30, r24
     6f0:	80 81       	ld	r24, Z
		ADCSRA |= (1<<ADSC);
     6f2:	8a e7       	ldi	r24, 0x7A	; 122
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	2a e7       	ldi	r18, 0x7A	; 122
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	f9 01       	movw	r30, r18
     6fc:	20 81       	ld	r18, Z
     6fe:	20 64       	ori	r18, 0x40	; 64
     700:	fc 01       	movw	r30, r24
     702:	20 83       	st	Z, r18
};
     704:	00 00       	nop
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <ipc_memory_register>:
//************************************
//*********** Functions **************

// register Data Memory and return pointer
void* ipc_memory_register(unsigned int no_bytes, unsigned char did)
{
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	00 d0       	rcall	.+0      	; 0x712 <ipc_memory_register+0x6>
     712:	00 d0       	rcall	.+0      	; 0x714 <ipc_memory_register+0x8>
     714:	1f 92       	push	r1
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	9c 83       	std	Y+4, r25	; 0x04
     71c:	8b 83       	std	Y+3, r24	; 0x03
     71e:	6d 83       	std	Y+5, r22	; 0x05
	unsigned int temp 	= memory_data_idx;
     720:	80 91 01 01 	lds	r24, 0x0101
     724:	90 91 02 01 	lds	r25, 0x0102
     728:	9a 83       	std	Y+2, r25	; 0x02
     72a:	89 83       	std	Y+1, r24	; 0x01
	memory_data_idx += no_bytes;
     72c:	20 91 01 01 	lds	r18, 0x0101
     730:	30 91 02 01 	lds	r19, 0x0102
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	9c 81       	ldd	r25, Y+4	; 0x04
     738:	82 0f       	add	r24, r18
     73a:	93 1f       	adc	r25, r19
     73c:	90 93 02 01 	sts	0x0102, r25
     740:	80 93 01 01 	sts	0x0101, r24

	if(memory_data_idx < memory_data_size)					// Check for enough Memory
     744:	80 91 01 01 	lds	r24, 0x0101
     748:	90 91 02 01 	lds	r25, 0x0102
     74c:	81 15       	cp	r24, r1
     74e:	92 40       	sbci	r25, 0x02	; 2
     750:	98 f4       	brcc	.+38     	; 0x778 <ipc_memory_register+0x6c>
	{
		memory_data_did[did] = (void*) &ipc_data_memory[temp];
     752:	8d 81       	ldd	r24, Y+5	; 0x05
     754:	88 2f       	mov	r24, r24
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	29 81       	ldd	r18, Y+1	; 0x01
     75a:	3a 81       	ldd	r19, Y+2	; 0x02
     75c:	24 5f       	subi	r18, 0xF4	; 244
     75e:	3e 4f       	sbci	r19, 0xFE	; 254
     760:	88 0f       	add	r24, r24
     762:	99 1f       	adc	r25, r25
     764:	84 5f       	subi	r24, 0xF4	; 244
     766:	9c 4f       	sbci	r25, 0xFC	; 252
     768:	fc 01       	movw	r30, r24
     76a:	31 83       	std	Z+1, r19	; 0x01
     76c:	20 83       	st	Z, r18
		return (void*) &ipc_data_memory[temp];
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	9a 81       	ldd	r25, Y+2	; 0x02
     772:	84 5f       	subi	r24, 0xF4	; 244
     774:	9e 4f       	sbci	r25, 0xFE	; 254
     776:	02 c0       	rjmp	.+4      	; 0x77c <ipc_memory_register+0x70>
	}
	else
	{
	//	error = err_no_memory_left;
		return 0;
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
	}
};
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <ipc_memory_get>:

// get pointer of registered Memory
void* ipc_memory_get(unsigned char did)
{
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	1f 92       	push	r1
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	89 83       	std	Y+1, r24	; 0x01
	return memory_data_did[did];
     798:	89 81       	ldd	r24, Y+1	; 0x01
     79a:	88 2f       	mov	r24, r24
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	84 5f       	subi	r24, 0xF4	; 244
     7a4:	9c 4f       	sbci	r25, 0xFC	; 252
     7a6:	fc 01       	movw	r30, r24
     7a8:	80 81       	ld	r24, Z
     7aa:	91 81       	ldd	r25, Z+1	; 0x01
};
     7ac:	0f 90       	pop	r0
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <main>:

unsigned int count = 0;
unsigned char current_val = 0;

int main(void)
{
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <main+0x6>
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
	sys_init();
     7be:	0e 94 64 04 	call	0x8c8	; 0x8c8 <sys_init>
	digit_init();
     7c2:	0e 94 48 00 	call	0x90	; 0x90 <digit_init>
	input_init();
     7c6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <input_init>
	time_init();
     7ca:	0e 94 a2 06 	call	0xd44	; 0xd44 <time_init>
	scheduler_init();
     7ce:	0e 94 38 05 	call	0xa70	; 0xa70 <scheduler_init>

	schedule(TASK_DIGIT,	1	); 	//Run TASK every tick		(every 1ms)
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
	schedule(TASK_INPUT,	2	);	//Run TASK every 2 ticks 	(every 2ms)
     7dc:	62 e0       	ldi	r22, 0x02	; 2
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
	schedule(TASK_BUTTON,	250	);	//Run TASK every 100 ticks	(every 100ms)
     7e6:	6a ef       	ldi	r22, 0xFA	; 250
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
	schedule(TASK_BLINK,	500	);	//Run TASK every 500 ticks	(every 0.5s)
     7f0:	64 ef       	ldi	r22, 0xF4	; 244
     7f2:	71 e0       	ldi	r23, 0x01	; 1
     7f4:	83 e0       	ldi	r24, 0x03	; 3
     7f6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
	schedule(TASK_COUNT,	1000);	//Run TASK every 1000 ticks	(every 1s)
     7fa:	68 ee       	ldi	r22, 0xE8	; 232
     7fc:	73 e0       	ldi	r23, 0x03	; 3
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>

	adc_t* main_adc = ipc_memory_get(did_INPUT);
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	0e 94 c6 03 	call	0x78c	; 0x78c <ipc_memory_get>
     80a:	9a 83       	std	Y+2, r25	; 0x02
     80c:	89 83       	std	Y+1, r24	; 0x01

	set_interrupts(ON);
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	0e 94 03 05 	call	0xa06	; 0xa06 <set_interrupts>
	set_dot(DOT1,TOGGLE);
     814:	63 e0       	ldi	r22, 0x03	; 3
     816:	83 e0       	ldi	r24, 0x03	; 3
     818:	0e 94 0e 02 	call	0x41c	; 0x41c <set_dot>

	while(1)
	{
		if(tickpassed)
     81c:	80 91 06 01 	lds	r24, 0x0106
     820:	88 23       	and	r24, r24
     822:	e1 f3       	breq	.-8      	; 0x81c <main+0x68>
		{
			tickpassed = 0;
     824:	10 92 06 01 	sts	0x0106, r1
			run_scheduler();
     828:	0e 94 69 06 	call	0xcd2	; 0xcd2 <run_scheduler>

			/***************** TASK_DIGIT *********************/
			if(run(TASK_DIGIT,tickpassed))
     82c:	80 91 06 01 	lds	r24, 0x0106
     830:	68 2f       	mov	r22, r24
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	0e 94 7e 06 	call	0xcfc	; 0xcfc <run>
     838:	88 23       	and	r24, r24
     83a:	11 f0       	breq	.+4      	; 0x840 <main+0x8c>
			{
				digit_draw();
     83c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <digit_draw>
			}

			/***************** TASK_INPUT *********************/
			if(run(TASK_INPUT,tickpassed))
     840:	80 91 06 01 	lds	r24, 0x0106
     844:	68 2f       	mov	r22, r24
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	0e 94 7e 06 	call	0xcfc	; 0xcfc <run>
     84c:	88 23       	and	r24, r24
     84e:	79 f0       	breq	.+30     	; 0x86e <main+0xba>
			{
				input_sample();
     850:	0e 94 d6 02 	call	0x5ac	; 0x5ac <input_sample>
				char2digit(main_adc->value[current_val]);
     854:	80 91 05 01 	lds	r24, 0x0105
     858:	88 2f       	mov	r24, r24
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	29 81       	ldd	r18, Y+1	; 0x01
     85e:	3a 81       	ldd	r19, Y+2	; 0x02
     860:	82 0f       	add	r24, r18
     862:	93 1f       	adc	r25, r19
     864:	02 96       	adiw	r24, 0x02	; 2
     866:	fc 01       	movw	r30, r24
     868:	80 81       	ld	r24, Z
     86a:	0e 94 59 00 	call	0xb2	; 0xb2 <char2digit>

			}

			/***************** TASK_BUTTON *********************/
			if(run(TASK_BUTTON,tickpassed))
     86e:	80 91 06 01 	lds	r24, 0x0106
     872:	68 2f       	mov	r22, r24
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	0e 94 7e 06 	call	0xcfc	; 0xcfc <run>
     87a:	88 23       	and	r24, r24
     87c:	61 f0       	breq	.+24     	; 0x896 <main+0xe2>
			{
				if(button_pressed)
     87e:	80 91 07 01 	lds	r24, 0x0107
     882:	88 23       	and	r24, r24
     884:	41 f0       	breq	.+16     	; 0x896 <main+0xe2>
				{
					button_pressed = 0;
     886:	10 92 07 01 	sts	0x0107, r1
					current_val ^= 1;
     88a:	90 91 05 01 	lds	r25, 0x0105
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	89 27       	eor	r24, r25
     892:	80 93 05 01 	sts	0x0105, r24
				}
			}

			/***************** TASK_BLINK *********************/
			if(run(TASK_BLINK,tickpassed))
     896:	80 91 06 01 	lds	r24, 0x0106
     89a:	68 2f       	mov	r22, r24
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <run>
     8a2:	88 23       	and	r24, r24
     8a4:	21 f0       	breq	.+8      	; 0x8ae <main+0xfa>
			{
				set_dot(DOT1,TOGGLE);
     8a6:	63 e0       	ldi	r22, 0x03	; 3
     8a8:	83 e0       	ldi	r24, 0x03	; 3
     8aa:	0e 94 0e 02 	call	0x41c	; 0x41c <set_dot>
			}

			/***************** TASK_COUNT *********************/
			if(run(TASK_COUNT,tickpassed))
     8ae:	80 91 06 01 	lds	r24, 0x0106
     8b2:	68 2f       	mov	r22, r24
     8b4:	84 e0       	ldi	r24, 0x04	; 4
     8b6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <run>
     8ba:	88 23       	and	r24, r24
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <main+0x10c>
     8be:	ae cf       	rjmp	.-164    	; 0x81c <main+0x68>
			{
				time_count(UP);
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	0e 94 b3 06 	call	0xd66	; 0xd66 <time_count>
			}
		}
	}
     8c6:	aa cf       	rjmp	.-172    	; 0x81c <main+0x68>

000008c8 <sys_init>:

/*
 * initialize the system
 */
void sys_init(void)
{
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
	//init IOs
	init_io();
     8d0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <init_io>
	//init the systick timer
	init_timer();
     8d4:	0e 94 c8 04 	call	0x990	; 0x990 <init_timer>
};
     8d8:	00 00       	nop
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <init_io>:

/*
 * initialize the I/Os
 */
void init_io(void)
{
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
	 * PIN_C				Output		0
	 * PIN_D				Output		0
	 * PIN_LATCH			Output		1
	 * PIN_LIGHT_TEST		Output		1
	 */
	DDRB = PIN_LIGHT_TEST | PIN_LATCH | PIN_A | PIN_B | PIN_C | PIN_D;
     8e8:	84 e2       	ldi	r24, 0x24	; 36
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	2f e3       	ldi	r18, 0x3F	; 63
     8ee:	fc 01       	movw	r30, r24
     8f0:	20 83       	st	Z, r18
	DDRC = PIN_ON | PIN_BUZZ | PIN_VIB;
     8f2:	87 e2       	ldi	r24, 0x27	; 39
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	24 e3       	ldi	r18, 0x34	; 52
     8f8:	fc 01       	movw	r30, r24
     8fa:	20 83       	st	Z, r18
	DDRD = PIN_DOT | PIN_PLUS | PIN_MINUS | PIN_FET_HOUR | PIN_FET_MINUTE_H | PIN_FET_MINUTE_L | PIN_FET_SECONDS | PIN_BLACK;
     8fc:	8a e2       	ldi	r24, 0x2A	; 42
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	2f ef       	ldi	r18, 0xFF	; 255
     902:	fc 01       	movw	r30, r24
     904:	20 83       	st	Z, r18

	PORTB = PIN_LIGHT_TEST;
     906:	85 e2       	ldi	r24, 0x25	; 37
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	fc 01       	movw	r30, r24
     90e:	20 83       	st	Z, r18
	PORTC = PIN_ON;
     910:	88 e2       	ldi	r24, 0x28	; 40
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	24 e0       	ldi	r18, 0x04	; 4
     916:	fc 01       	movw	r30, r24
     918:	20 83       	st	Z, r18
	PORTD = PIN_BLACK;
     91a:	8b e2       	ldi	r24, 0x2B	; 43
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	20 e8       	ldi	r18, 0x80	; 128
     920:	fc 01       	movw	r30, r24
     922:	20 83       	st	Z, r18

	//Enable pin change interrupt on PCINT11 (PIN_SWITCH)
	PCICR 	= (1<<PCIE1);
     924:	88 e6       	ldi	r24, 0x68	; 104
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	22 e0       	ldi	r18, 0x02	; 2
     92a:	fc 01       	movw	r30, r24
     92c:	20 83       	st	Z, r18
	PCMSK1 	= (1<<PCINT11);
     92e:	8c e6       	ldi	r24, 0x6C	; 108
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	28 e0       	ldi	r18, 0x08	; 8
     934:	fc 01       	movw	r30, r24
     936:	20 83       	st	Z, r18
};
     938:	00 00       	nop
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	08 95       	ret

00000940 <__vector_4>:
ISR(PCINT1_vect)
{
     940:	1f 92       	push	r1
     942:	0f 92       	push	r0
     944:	00 90 5f 00 	lds	r0, 0x005F
     948:	0f 92       	push	r0
     94a:	11 24       	eor	r1, r1
     94c:	8f 93       	push	r24
     94e:	9f 93       	push	r25
     950:	ef 93       	push	r30
     952:	ff 93       	push	r31
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
	if(PINC & PIN_SWITCH)
     95c:	86 e2       	ldi	r24, 0x26	; 38
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	88 2f       	mov	r24, r24
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	88 70       	andi	r24, 0x08	; 8
     96a:	99 27       	eor	r25, r25
     96c:	89 2b       	or	r24, r25
     96e:	19 f0       	breq	.+6      	; 0x976 <__vector_4+0x36>
		button_pressed = 1;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	80 93 07 01 	sts	0x0107, r24
}
     976:	00 00       	nop
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	ff 91       	pop	r31
     97e:	ef 91       	pop	r30
     980:	9f 91       	pop	r25
     982:	8f 91       	pop	r24
     984:	0f 90       	pop	r0
     986:	00 92 5f 00 	sts	0x005F, r0
     98a:	0f 90       	pop	r0
     98c:	1f 90       	pop	r1
     98e:	18 95       	reti

00000990 <init_timer>:

/*
 * initialize the timers
 */
void init_timer(void)
{
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
	 * Mode: 		CTC
	 * Prescaler: 	1
	 * OCR1A:		6999
	 * t_tick:		1ms
	 */
	OCR1A = 6999;
     998:	88 e8       	ldi	r24, 0x88	; 136
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	27 e5       	ldi	r18, 0x57	; 87
     99e:	3b e1       	ldi	r19, 0x1B	; 27
     9a0:	fc 01       	movw	r30, r24
     9a2:	31 83       	std	Z+1, r19	; 0x01
     9a4:	20 83       	st	Z, r18
	TCCR1A = 0;
     9a6:	80 e8       	ldi	r24, 0x80	; 128
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	fc 01       	movw	r30, r24
     9ac:	10 82       	st	Z, r1
	TCCR1B = (1<<WGM12) | (1<<CS10);
     9ae:	81 e8       	ldi	r24, 0x81	; 129
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	29 e0       	ldi	r18, 0x09	; 9
     9b4:	fc 01       	movw	r30, r24
     9b6:	20 83       	st	Z, r18
	TCCR1C = 0;
     9b8:	82 e8       	ldi	r24, 0x82	; 130
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	fc 01       	movw	r30, r24
     9be:	10 82       	st	Z, r1
	TIMSK1 = (1<<OCIE1A);
     9c0:	8f e6       	ldi	r24, 0x6F	; 111
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	22 e0       	ldi	r18, 0x02	; 2
     9c6:	fc 01       	movw	r30, r24
     9c8:	20 83       	st	Z, r18
};
     9ca:	00 00       	nop
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <__vector_11>:
ISR(TIMER1_COMPA_vect)
{
     9d2:	1f 92       	push	r1
     9d4:	0f 92       	push	r0
     9d6:	00 90 5f 00 	lds	r0, 0x005F
     9da:	0f 92       	push	r0
     9dc:	11 24       	eor	r1, r1
     9de:	8f 93       	push	r24
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
	tickpassed++;
     9e8:	80 91 06 01 	lds	r24, 0x0106
     9ec:	8f 5f       	subi	r24, 0xFF	; 255
     9ee:	80 93 06 01 	sts	0x0106, r24
};
     9f2:	00 00       	nop
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	8f 91       	pop	r24
     9fa:	0f 90       	pop	r0
     9fc:	00 92 5f 00 	sts	0x005F, r0
     a00:	0f 90       	pop	r0
     a02:	1f 90       	pop	r1
     a04:	18 95       	reti

00000a06 <set_interrupts>:

/*
 * Set global interrupts
 */
void set_interrupts(unsigned char state)
{
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	1f 92       	push	r1
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	89 83       	std	Y+1, r24	; 0x01
	if(state == ON)
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	51 f4       	brne	.+20     	; 0xa2c <set_interrupts+0x26>
		SREG |= (1<<SREG_I);
     a18:	8f e5       	ldi	r24, 0x5F	; 95
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	2f e5       	ldi	r18, 0x5F	; 95
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	f9 01       	movw	r30, r18
     a22:	20 81       	ld	r18, Z
     a24:	20 68       	ori	r18, 0x80	; 128
     a26:	fc 01       	movw	r30, r24
     a28:	20 83       	st	Z, r18
	else if (state == OFF)
		SREG &= ~(1<<SREG_I);
};
     a2a:	0c c0       	rjmp	.+24     	; 0xa44 <set_interrupts+0x3e>
 */
void set_interrupts(unsigned char state)
{
	if(state == ON)
		SREG |= (1<<SREG_I);
	else if (state == OFF)
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	88 23       	and	r24, r24
     a30:	49 f4       	brne	.+18     	; 0xa44 <set_interrupts+0x3e>
		SREG &= ~(1<<SREG_I);
     a32:	8f e5       	ldi	r24, 0x5F	; 95
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	2f e5       	ldi	r18, 0x5F	; 95
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	f9 01       	movw	r30, r18
     a3c:	20 81       	ld	r18, Z
     a3e:	2f 77       	andi	r18, 0x7F	; 127
     a40:	fc 01       	movw	r30, r24
     a42:	20 83       	st	Z, r18
};
     a44:	00 00       	nop
     a46:	0f 90       	pop	r0
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <shutdown>:

/*
 * turn off the power
 */
void shutdown(void)
{
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
	PORTC &= ~PIN_ON;
     a56:	88 e2       	ldi	r24, 0x28	; 40
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	28 e2       	ldi	r18, 0x28	; 40
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	f9 01       	movw	r30, r18
     a60:	20 81       	ld	r18, Z
     a62:	2b 7f       	andi	r18, 0xFB	; 251
     a64:	fc 01       	movw	r30, r24
     a66:	20 83       	st	Z, r18
};
     a68:	00 00       	nop
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <scheduler_init>:

/*
 * initialize the os struct
 */
void scheduler_init(void)
{
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	1f 92       	push	r1
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
	//register memory
	os = ipc_memory_register(sizeof(schedule_t),did_SCHEDULER);
     a7a:	64 e0       	ldi	r22, 0x04	; 4
     a7c:	8f e1       	ldi	r24, 0x1F	; 31
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 86 03 	call	0x70c	; 0x70c <ipc_memory_register>
     a84:	90 93 35 03 	sts	0x0335, r25
     a88:	80 93 34 03 	sts	0x0334, r24

	//initialize the parameters for every task
	for(unsigned char count=0;count<NUM_TASKS;count++)
     a8c:	19 82       	std	Y+1, r1	; 0x01
     a8e:	38 c0       	rjmp	.+112    	; 0xb00 <scheduler_init+0x90>
	{
		os->active[count]	= 0; //Task is not active
     a90:	20 91 34 03 	lds	r18, 0x0334
     a94:	30 91 35 03 	lds	r19, 0x0335
     a98:	89 81       	ldd	r24, Y+1	; 0x01
     a9a:	88 2f       	mov	r24, r24
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	82 0f       	add	r24, r18
     aa0:	93 1f       	adc	r25, r19
     aa2:	fc 01       	movw	r30, r24
     aa4:	10 82       	st	Z, r1
		os->flag[count]		= 0; //No task wants to run
     aa6:	20 91 34 03 	lds	r18, 0x0334
     aaa:	30 91 35 03 	lds	r19, 0x0335
     aae:	89 81       	ldd	r24, Y+1	; 0x01
     ab0:	88 2f       	mov	r24, r24
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	82 0f       	add	r24, r18
     ab6:	93 1f       	adc	r25, r19
     ab8:	05 96       	adiw	r24, 0x05	; 5
     aba:	fc 01       	movw	r30, r24
     abc:	10 82       	st	Z, r1
		os->timer[count]		= 0; //Reset the timer of the task
     abe:	20 91 34 03 	lds	r18, 0x0334
     ac2:	30 91 35 03 	lds	r19, 0x0335
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	88 2f       	mov	r24, r24
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	05 96       	adiw	r24, 0x05	; 5
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	82 0f       	add	r24, r18
     ad4:	93 1f       	adc	r25, r19
     ad6:	fc 01       	movw	r30, r24
     ad8:	11 82       	std	Z+1, r1	; 0x01
     ada:	10 82       	st	Z, r1
		os->schedule[count]	= 0; //Reset the schedule of the task
     adc:	20 91 34 03 	lds	r18, 0x0334
     ae0:	30 91 35 03 	lds	r19, 0x0335
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	88 2f       	mov	r24, r24
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0a 96       	adiw	r24, 0x0a	; 10
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	82 0f       	add	r24, r18
     af2:	93 1f       	adc	r25, r19
     af4:	fc 01       	movw	r30, r24
     af6:	11 82       	std	Z+1, r1	; 0x01
     af8:	10 82       	st	Z, r1
{
	//register memory
	os = ipc_memory_register(sizeof(schedule_t),did_SCHEDULER);

	//initialize the parameters for every task
	for(unsigned char count=0;count<NUM_TASKS;count++)
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	8f 5f       	subi	r24, 0xFF	; 255
     afe:	89 83       	std	Y+1, r24	; 0x01
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	85 30       	cpi	r24, 0x05	; 5
     b04:	28 f2       	brcs	.-118    	; 0xa90 <scheduler_init+0x20>
		os->active[count]	= 0; //Task is not active
		os->flag[count]		= 0; //No task wants to run
		os->timer[count]		= 0; //Reset the timer of the task
		os->schedule[count]	= 0; //Reset the schedule of the task
	}
	os->loop_ovf = 0; //No loop overflow occurred
     b06:	80 91 34 03 	lds	r24, 0x0334
     b0a:	90 91 35 03 	lds	r25, 0x0335
     b0e:	fc 01       	movw	r30, r24
     b10:	16 8e       	std	Z+30, r1	; 0x1e
};
     b12:	00 00       	nop
     b14:	0f 90       	pop	r0
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	08 95       	ret

00000b1c <schedule>:

/*
 * schedule one task, the task is automatically set active!
 */
void schedule(unsigned char task, unsigned int schedule)
{
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	00 d0       	rcall	.+0      	; 0xb22 <schedule+0x6>
     b22:	1f 92       	push	r1
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	89 83       	std	Y+1, r24	; 0x01
     b2a:	7b 83       	std	Y+3, r23	; 0x03
     b2c:	6a 83       	std	Y+2, r22	; 0x02
	set_task(task,ACTIVE);	//Set task active
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_task>
	os->schedule[task] = schedule; //Update schedule
     b36:	20 91 34 03 	lds	r18, 0x0334
     b3a:	30 91 35 03 	lds	r19, 0x0335
     b3e:	89 81       	ldd	r24, Y+1	; 0x01
     b40:	88 2f       	mov	r24, r24
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0a 96       	adiw	r24, 0x0a	; 10
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	82 0f       	add	r24, r18
     b4c:	93 1f       	adc	r25, r19
     b4e:	2a 81       	ldd	r18, Y+2	; 0x02
     b50:	3b 81       	ldd	r19, Y+3	; 0x03
     b52:	fc 01       	movw	r30, r24
     b54:	31 83       	std	Z+1, r19	; 0x01
     b56:	20 83       	st	Z, r18
	os->timer[task]	  = schedule; //Reload the timer
     b58:	20 91 34 03 	lds	r18, 0x0334
     b5c:	30 91 35 03 	lds	r19, 0x0335
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	88 2f       	mov	r24, r24
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	05 96       	adiw	r24, 0x05	; 5
     b68:	88 0f       	add	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	82 0f       	add	r24, r18
     b6e:	93 1f       	adc	r25, r19
     b70:	2a 81       	ldd	r18, Y+2	; 0x02
     b72:	3b 81       	ldd	r19, Y+3	; 0x03
     b74:	fc 01       	movw	r30, r24
     b76:	31 83       	std	Z+1, r19	; 0x01
     b78:	20 83       	st	Z, r18
};
     b7a:	00 00       	nop
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <set_task>:

/*
 * Set a task active or inactive
 */
void set_task(unsigned char task, unsigned char state)
{
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <set_task+0x6>
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	6a 83       	std	Y+2, r22	; 0x02
	os->active[task] = state;
     b96:	20 91 34 03 	lds	r18, 0x0334
     b9a:	30 91 35 03 	lds	r19, 0x0335
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	88 2f       	mov	r24, r24
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	82 0f       	add	r24, r18
     ba6:	93 1f       	adc	r25, r19
     ba8:	2a 81       	ldd	r18, Y+2	; 0x02
     baa:	fc 01       	movw	r30, r24
     bac:	20 83       	st	Z, r18
};
     bae:	00 00       	nop
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	08 95       	ret

00000bba <count_task>:

/*
 * Calculate the run flag for one task
 */
void count_task(unsigned char task)
{
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	1f 92       	push	r1
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	89 83       	std	Y+1, r24	; 0x01
	if(os->active[task]) 	//only execute when task is active
     bc6:	20 91 34 03 	lds	r18, 0x0334
     bca:	30 91 35 03 	lds	r19, 0x0335
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	88 2f       	mov	r24, r24
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	82 0f       	add	r24, r18
     bd6:	93 1f       	adc	r25, r19
     bd8:	fc 01       	movw	r30, r24
     bda:	80 81       	ld	r24, Z
     bdc:	88 23       	and	r24, r24
     bde:	09 f4       	brne	.+2      	; 0xbe2 <count_task+0x28>
     be0:	67 c0       	rjmp	.+206    	; 0xcb0 <count_task+0xf6>
	{
		os->timer[task]--;	  	//update the timer count
     be2:	80 91 34 03 	lds	r24, 0x0334
     be6:	90 91 35 03 	lds	r25, 0x0335
     bea:	29 81       	ldd	r18, Y+1	; 0x01
     bec:	22 2f       	mov	r18, r18
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	a9 01       	movw	r20, r18
     bf2:	4b 5f       	subi	r20, 0xFB	; 251
     bf4:	5f 4f       	sbci	r21, 0xFF	; 255
     bf6:	44 0f       	add	r20, r20
     bf8:	55 1f       	adc	r21, r21
     bfa:	48 0f       	add	r20, r24
     bfc:	59 1f       	adc	r21, r25
     bfe:	fa 01       	movw	r30, r20
     c00:	40 81       	ld	r20, Z
     c02:	51 81       	ldd	r21, Z+1	; 0x01
     c04:	41 50       	subi	r20, 0x01	; 1
     c06:	51 09       	sbc	r21, r1
     c08:	2b 5f       	subi	r18, 0xFB	; 251
     c0a:	3f 4f       	sbci	r19, 0xFF	; 255
     c0c:	22 0f       	add	r18, r18
     c0e:	33 1f       	adc	r19, r19
     c10:	82 0f       	add	r24, r18
     c12:	93 1f       	adc	r25, r19
     c14:	fc 01       	movw	r30, r24
     c16:	51 83       	std	Z+1, r21	; 0x01
     c18:	40 83       	st	Z, r20
		if(os->timer[task] == 0) //When the timer is finished, the task wants to execute
     c1a:	20 91 34 03 	lds	r18, 0x0334
     c1e:	30 91 35 03 	lds	r19, 0x0335
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	88 2f       	mov	r24, r24
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	05 96       	adiw	r24, 0x05	; 5
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	82 0f       	add	r24, r18
     c30:	93 1f       	adc	r25, r19
     c32:	fc 01       	movw	r30, r24
     c34:	80 81       	ld	r24, Z
     c36:	91 81       	ldd	r25, Z+1	; 0x01
     c38:	89 2b       	or	r24, r25
     c3a:	69 f5       	brne	.+90     	; 0xc96 <count_task+0xdc>
		{
			os->timer[task] = os->schedule[task]; //Reload the timer with the schedule value
     c3c:	40 91 34 03 	lds	r20, 0x0334
     c40:	50 91 35 03 	lds	r21, 0x0335
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	60 91 34 03 	lds	r22, 0x0334
     c4e:	70 91 35 03 	lds	r23, 0x0335
     c52:	29 81       	ldd	r18, Y+1	; 0x01
     c54:	22 2f       	mov	r18, r18
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	26 5f       	subi	r18, 0xF6	; 246
     c5a:	3f 4f       	sbci	r19, 0xFF	; 255
     c5c:	22 0f       	add	r18, r18
     c5e:	33 1f       	adc	r19, r19
     c60:	26 0f       	add	r18, r22
     c62:	37 1f       	adc	r19, r23
     c64:	f9 01       	movw	r30, r18
     c66:	20 81       	ld	r18, Z
     c68:	31 81       	ldd	r19, Z+1	; 0x01
     c6a:	05 96       	adiw	r24, 0x05	; 5
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	84 0f       	add	r24, r20
     c72:	95 1f       	adc	r25, r21
     c74:	fc 01       	movw	r30, r24
     c76:	31 83       	std	Z+1, r19	; 0x01
     c78:	20 83       	st	Z, r18
			os->flag[task] = 1;	//Set the flag for the task
     c7a:	20 91 34 03 	lds	r18, 0x0334
     c7e:	30 91 35 03 	lds	r19, 0x0335
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	88 2f       	mov	r24, r24
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	82 0f       	add	r24, r18
     c8a:	93 1f       	adc	r25, r19
     c8c:	05 96       	adiw	r24, 0x05	; 5
     c8e:	21 e0       	ldi	r18, 0x01	; 1
     c90:	fc 01       	movw	r30, r24
     c92:	20 83       	st	Z, r18
		else					//when the timer is not finished, the task does not want to run
			os->flag[task] = 0;	//Do not set the flag
	}
	else
		os->flag[task] = 0;	//Do not set the flag
};
     c94:	19 c0       	rjmp	.+50     	; 0xcc8 <count_task+0x10e>
		{
			os->timer[task] = os->schedule[task]; //Reload the timer with the schedule value
			os->flag[task] = 1;	//Set the flag for the task
		}
		else					//when the timer is not finished, the task does not want to run
			os->flag[task] = 0;	//Do not set the flag
     c96:	20 91 34 03 	lds	r18, 0x0334
     c9a:	30 91 35 03 	lds	r19, 0x0335
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	88 2f       	mov	r24, r24
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	82 0f       	add	r24, r18
     ca6:	93 1f       	adc	r25, r19
     ca8:	05 96       	adiw	r24, 0x05	; 5
     caa:	fc 01       	movw	r30, r24
     cac:	10 82       	st	Z, r1
	}
	else
		os->flag[task] = 0;	//Do not set the flag
};
     cae:	0c c0       	rjmp	.+24     	; 0xcc8 <count_task+0x10e>
		}
		else					//when the timer is not finished, the task does not want to run
			os->flag[task] = 0;	//Do not set the flag
	}
	else
		os->flag[task] = 0;	//Do not set the flag
     cb0:	20 91 34 03 	lds	r18, 0x0334
     cb4:	30 91 35 03 	lds	r19, 0x0335
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	88 2f       	mov	r24, r24
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	82 0f       	add	r24, r18
     cc0:	93 1f       	adc	r25, r19
     cc2:	05 96       	adiw	r24, 0x05	; 5
     cc4:	fc 01       	movw	r30, r24
     cc6:	10 82       	st	Z, r1
};
     cc8:	00 00       	nop
     cca:	0f 90       	pop	r0
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	08 95       	ret

00000cd2 <run_scheduler>:

/*
 * calculate the scheduling
 */
void run_scheduler(void)
{
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	1f 92       	push	r1
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
	for(unsigned char task = 0;task<NUM_TASKS;task++)
     cdc:	19 82       	std	Y+1, r1	; 0x01
     cde:	06 c0       	rjmp	.+12     	; 0xcec <run_scheduler+0x1a>
		count_task(task);
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	0e 94 dd 05 	call	0xbba	; 0xbba <count_task>
/*
 * calculate the scheduling
 */
void run_scheduler(void)
{
	for(unsigned char task = 0;task<NUM_TASKS;task++)
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	8f 5f       	subi	r24, 0xFF	; 255
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	85 30       	cpi	r24, 0x05	; 5
     cf0:	b8 f3       	brcs	.-18     	; 0xce0 <run_scheduler+0xe>
		count_task(task);
};
     cf2:	00 00       	nop
     cf4:	0f 90       	pop	r0
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	08 95       	ret

00000cfc <run>:

/*
 * Perform the scheduling and decide whether to run the specified task
 */
unsigned char run(unsigned char task, unsigned char tickstate)
{
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	00 d0       	rcall	.+0      	; 0xd02 <run+0x6>
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	89 83       	std	Y+1, r24	; 0x01
     d08:	6a 83       	std	Y+2, r22	; 0x02
	if(tickstate) //When another systick is passed, do not execute the task and set the overflow flag
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	88 23       	and	r24, r24
     d0e:	49 f0       	breq	.+18     	; 0xd22 <run+0x26>
	{
		os->loop_ovf = task;
     d10:	80 91 34 03 	lds	r24, 0x0334
     d14:	90 91 35 03 	lds	r25, 0x0335
     d18:	29 81       	ldd	r18, Y+1	; 0x01
     d1a:	fc 01       	movw	r30, r24
     d1c:	26 8f       	std	Z+30, r18	; 0x1e
		return 0;
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	0c c0       	rjmp	.+24     	; 0xd3a <run+0x3e>
	}
	else
		return os->flag[task]; //Return the state of the task flag
     d22:	20 91 34 03 	lds	r18, 0x0334
     d26:	30 91 35 03 	lds	r19, 0x0335
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	82 0f       	add	r24, r18
     d32:	93 1f       	adc	r25, r19
     d34:	05 96       	adiw	r24, 0x05	; 5
     d36:	fc 01       	movw	r30, r24
     d38:	80 81       	ld	r24, Z
};
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <time_init>:

/*
 * init time
 */
void time_init(void)
{
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
	//register memory
	systime = ipc_memory_register(sizeof(time_t),did_TIME);
     d4c:	63 e0       	ldi	r22, 0x03	; 3
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 86 03 	call	0x70c	; 0x70c <ipc_memory_register>
     d56:	90 93 37 03 	sts	0x0337, r25
     d5a:	80 93 36 03 	sts	0x0336, r24
};
     d5e:	00 00       	nop
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	08 95       	ret

00000d66 <time_count>:
/*
 * Count the time, has to be called every second.
 * Returns 1 when over or overflow occurred
 */
unsigned char time_count(unsigned char direction)
{
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	1f 92       	push	r1
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	89 83       	std	Y+1, r24	; 0x01
	if(direction == UP)
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	88 23       	and	r24, r24
     d76:	09 f0       	breq	.+2      	; 0xd7a <time_count+0x14>
     d78:	5f c0       	rjmp	.+190    	; 0xe38 <time_count+0xd2>
	{
		//Count seconds
		if(systime->second < 59)
     d7a:	80 91 36 03 	lds	r24, 0x0336
     d7e:	90 91 37 03 	lds	r25, 0x0337
     d82:	fc 01       	movw	r30, r24
     d84:	82 81       	ldd	r24, Z+2	; 0x02
     d86:	8b 33       	cpi	r24, 0x3B	; 59
     d88:	58 f4       	brcc	.+22     	; 0xda0 <time_count+0x3a>
		{
			systime->second++;
     d8a:	80 91 36 03 	lds	r24, 0x0336
     d8e:	90 91 37 03 	lds	r25, 0x0337
     d92:	fc 01       	movw	r30, r24
     d94:	22 81       	ldd	r18, Z+2	; 0x02
     d96:	2f 5f       	subi	r18, 0xFF	; 255
     d98:	fc 01       	movw	r30, r24
     d9a:	22 83       	std	Z+2, r18	; 0x02
			return 0;
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	b3 c0       	rjmp	.+358    	; 0xf06 <time_count+0x1a0>
		}
		//Count minutes
		else if(systime->minute < 59)
     da0:	80 91 36 03 	lds	r24, 0x0336
     da4:	90 91 37 03 	lds	r25, 0x0337
     da8:	fc 01       	movw	r30, r24
     daa:	81 81       	ldd	r24, Z+1	; 0x01
     dac:	8b 33       	cpi	r24, 0x3B	; 59
     dae:	88 f4       	brcc	.+34     	; 0xdd2 <time_count+0x6c>
		{
			systime->second = 0;
     db0:	80 91 36 03 	lds	r24, 0x0336
     db4:	90 91 37 03 	lds	r25, 0x0337
     db8:	fc 01       	movw	r30, r24
     dba:	12 82       	std	Z+2, r1	; 0x02
			systime->minute++;
     dbc:	80 91 36 03 	lds	r24, 0x0336
     dc0:	90 91 37 03 	lds	r25, 0x0337
     dc4:	fc 01       	movw	r30, r24
     dc6:	21 81       	ldd	r18, Z+1	; 0x01
     dc8:	2f 5f       	subi	r18, 0xFF	; 255
     dca:	fc 01       	movw	r30, r24
     dcc:	21 83       	std	Z+1, r18	; 0x01
			return 0;
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	9a c0       	rjmp	.+308    	; 0xf06 <time_count+0x1a0>
		}
		//Count hours
		else if(systime->hour < 1)
     dd2:	80 91 36 03 	lds	r24, 0x0336
     dd6:	90 91 37 03 	lds	r25, 0x0337
     dda:	fc 01       	movw	r30, r24
     ddc:	80 81       	ld	r24, Z
     dde:	88 23       	and	r24, r24
     de0:	b9 f4       	brne	.+46     	; 0xe10 <time_count+0xaa>
		{
			systime->second = 0;
     de2:	80 91 36 03 	lds	r24, 0x0336
     de6:	90 91 37 03 	lds	r25, 0x0337
     dea:	fc 01       	movw	r30, r24
     dec:	12 82       	std	Z+2, r1	; 0x02
			systime->minute = 0;
     dee:	80 91 36 03 	lds	r24, 0x0336
     df2:	90 91 37 03 	lds	r25, 0x0337
     df6:	fc 01       	movw	r30, r24
     df8:	11 82       	std	Z+1, r1	; 0x01
			systime->hour++;
     dfa:	80 91 36 03 	lds	r24, 0x0336
     dfe:	90 91 37 03 	lds	r25, 0x0337
     e02:	fc 01       	movw	r30, r24
     e04:	20 81       	ld	r18, Z
     e06:	2f 5f       	subi	r18, 0xFF	; 255
     e08:	fc 01       	movw	r30, r24
     e0a:	20 83       	st	Z, r18
			return 0;
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	7b c0       	rjmp	.+246    	; 0xf06 <time_count+0x1a0>
		}
		//Reset count on overflow
		else
		{
			systime->second = 0;
     e10:	80 91 36 03 	lds	r24, 0x0336
     e14:	90 91 37 03 	lds	r25, 0x0337
     e18:	fc 01       	movw	r30, r24
     e1a:	12 82       	std	Z+2, r1	; 0x02
			systime->minute = 0;
     e1c:	80 91 36 03 	lds	r24, 0x0336
     e20:	90 91 37 03 	lds	r25, 0x0337
     e24:	fc 01       	movw	r30, r24
     e26:	11 82       	std	Z+1, r1	; 0x01
			systime->hour   = 0;
     e28:	80 91 36 03 	lds	r24, 0x0336
     e2c:	90 91 37 03 	lds	r25, 0x0337
     e30:	fc 01       	movw	r30, r24
     e32:	10 82       	st	Z, r1
			return 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	67 c0       	rjmp	.+206    	; 0xf06 <time_count+0x1a0>
		}
	}
	else if(direction == DOWN)
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	09 f0       	breq	.+2      	; 0xe40 <time_count+0xda>
     e3e:	62 c0       	rjmp	.+196    	; 0xf04 <time_count+0x19e>
	{
		//Count seconds
		if(systime->second > 0)
     e40:	80 91 36 03 	lds	r24, 0x0336
     e44:	90 91 37 03 	lds	r25, 0x0337
     e48:	fc 01       	movw	r30, r24
     e4a:	82 81       	ldd	r24, Z+2	; 0x02
     e4c:	88 23       	and	r24, r24
     e4e:	59 f0       	breq	.+22     	; 0xe66 <time_count+0x100>
		{
			systime->second--;
     e50:	80 91 36 03 	lds	r24, 0x0336
     e54:	90 91 37 03 	lds	r25, 0x0337
     e58:	fc 01       	movw	r30, r24
     e5a:	22 81       	ldd	r18, Z+2	; 0x02
     e5c:	21 50       	subi	r18, 0x01	; 1
     e5e:	fc 01       	movw	r30, r24
     e60:	22 83       	std	Z+2, r18	; 0x02
			return 0;
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	50 c0       	rjmp	.+160    	; 0xf06 <time_count+0x1a0>
		}
		//Count minutes
		else if(systime->minute > 0)
     e66:	80 91 36 03 	lds	r24, 0x0336
     e6a:	90 91 37 03 	lds	r25, 0x0337
     e6e:	fc 01       	movw	r30, r24
     e70:	81 81       	ldd	r24, Z+1	; 0x01
     e72:	88 23       	and	r24, r24
     e74:	91 f0       	breq	.+36     	; 0xe9a <time_count+0x134>
		{
			systime->second = 60;
     e76:	80 91 36 03 	lds	r24, 0x0336
     e7a:	90 91 37 03 	lds	r25, 0x0337
     e7e:	2c e3       	ldi	r18, 0x3C	; 60
     e80:	fc 01       	movw	r30, r24
     e82:	22 83       	std	Z+2, r18	; 0x02
			systime->minute--;
     e84:	80 91 36 03 	lds	r24, 0x0336
     e88:	90 91 37 03 	lds	r25, 0x0337
     e8c:	fc 01       	movw	r30, r24
     e8e:	21 81       	ldd	r18, Z+1	; 0x01
     e90:	21 50       	subi	r18, 0x01	; 1
     e92:	fc 01       	movw	r30, r24
     e94:	21 83       	std	Z+1, r18	; 0x01
			return 0;
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	36 c0       	rjmp	.+108    	; 0xf06 <time_count+0x1a0>
		}
		//Count hours
		else if(systime->hour > 0)
     e9a:	80 91 36 03 	lds	r24, 0x0336
     e9e:	90 91 37 03 	lds	r25, 0x0337
     ea2:	fc 01       	movw	r30, r24
     ea4:	80 81       	ld	r24, Z
     ea6:	88 23       	and	r24, r24
     ea8:	c9 f0       	breq	.+50     	; 0xedc <time_count+0x176>
		{
			systime->second = 60;
     eaa:	80 91 36 03 	lds	r24, 0x0336
     eae:	90 91 37 03 	lds	r25, 0x0337
     eb2:	2c e3       	ldi	r18, 0x3C	; 60
     eb4:	fc 01       	movw	r30, r24
     eb6:	22 83       	std	Z+2, r18	; 0x02
			systime->minute = 60;
     eb8:	80 91 36 03 	lds	r24, 0x0336
     ebc:	90 91 37 03 	lds	r25, 0x0337
     ec0:	2c e3       	ldi	r18, 0x3C	; 60
     ec2:	fc 01       	movw	r30, r24
     ec4:	21 83       	std	Z+1, r18	; 0x01
			systime->hour--;
     ec6:	80 91 36 03 	lds	r24, 0x0336
     eca:	90 91 37 03 	lds	r25, 0x0337
     ece:	fc 01       	movw	r30, r24
     ed0:	20 81       	ld	r18, Z
     ed2:	21 50       	subi	r18, 0x01	; 1
     ed4:	fc 01       	movw	r30, r24
     ed6:	20 83       	st	Z, r18
			return 0;
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	15 c0       	rjmp	.+42     	; 0xf06 <time_count+0x1a0>
		}
		//Reset count on overflow
		else
		{
			systime->second = 0;
     edc:	80 91 36 03 	lds	r24, 0x0336
     ee0:	90 91 37 03 	lds	r25, 0x0337
     ee4:	fc 01       	movw	r30, r24
     ee6:	12 82       	std	Z+2, r1	; 0x02
			systime->minute = 0;
     ee8:	80 91 36 03 	lds	r24, 0x0336
     eec:	90 91 37 03 	lds	r25, 0x0337
     ef0:	fc 01       	movw	r30, r24
     ef2:	11 82       	std	Z+1, r1	; 0x01
			systime->hour   = 0;
     ef4:	80 91 36 03 	lds	r24, 0x0336
     ef8:	90 91 37 03 	lds	r25, 0x0337
     efc:	fc 01       	movw	r30, r24
     efe:	10 82       	st	Z, r1
			return 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <time_count+0x1a0>
		}
	}
	else
		return 1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
};
     f06:	0f 90       	pop	r0
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <get_digit_time>:

/*
 * get the digits to display of the current time
 */
unsigned char get_digit_time(unsigned char digitnumber)
{
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	1f 92       	push	r1
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	89 83       	std	Y+1, r24	; 0x01
	switch(digitnumber)
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	83 30       	cpi	r24, 0x03	; 3
     f22:	91 05       	cpc	r25, r1
     f24:	21 f1       	breq	.+72     	; 0xf6e <get_digit_time+0x60>
     f26:	84 30       	cpi	r24, 0x04	; 4
     f28:	91 05       	cpc	r25, r1
     f2a:	34 f4       	brge	.+12     	; 0xf38 <get_digit_time+0x2a>
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	49 f0       	breq	.+18     	; 0xf44 <get_digit_time+0x36>
     f32:	02 97       	sbiw	r24, 0x02	; 2
     f34:	71 f0       	breq	.+28     	; 0xf52 <get_digit_time+0x44>
     f36:	55 c0       	rjmp	.+170    	; 0xfe2 <get_digit_time+0xd4>
     f38:	84 30       	cpi	r24, 0x04	; 4
     f3a:	91 05       	cpc	r25, r1
     f3c:	71 f1       	breq	.+92     	; 0xf9a <get_digit_time+0x8c>
     f3e:	05 97       	sbiw	r24, 0x05	; 5
     f40:	d1 f1       	breq	.+116    	; 0xfb6 <get_digit_time+0xa8>
     f42:	4f c0       	rjmp	.+158    	; 0xfe2 <get_digit_time+0xd4>
	{
	case 1:
		return systime->hour;
     f44:	80 91 36 03 	lds	r24, 0x0336
     f48:	90 91 37 03 	lds	r25, 0x0337
     f4c:	fc 01       	movw	r30, r24
     f4e:	80 81       	ld	r24, Z
     f50:	49 c0       	rjmp	.+146    	; 0xfe4 <get_digit_time+0xd6>
		break;
	case 2:
		return (unsigned char)(systime->minute/10);
     f52:	80 91 36 03 	lds	r24, 0x0336
     f56:	90 91 37 03 	lds	r25, 0x0337
     f5a:	fc 01       	movw	r30, r24
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	8d ec       	ldi	r24, 0xCD	; 205
     f60:	98 9f       	mul	r25, r24
     f62:	81 2d       	mov	r24, r1
     f64:	11 24       	eor	r1, r1
     f66:	86 95       	lsr	r24
     f68:	86 95       	lsr	r24
     f6a:	86 95       	lsr	r24
     f6c:	3b c0       	rjmp	.+118    	; 0xfe4 <get_digit_time+0xd6>
		break;
	case 3:
		return systime->minute%10;
     f6e:	80 91 36 03 	lds	r24, 0x0336
     f72:	90 91 37 03 	lds	r25, 0x0337
     f76:	fc 01       	movw	r30, r24
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	8d ec       	ldi	r24, 0xCD	; 205
     f7c:	98 9f       	mul	r25, r24
     f7e:	81 2d       	mov	r24, r1
     f80:	11 24       	eor	r1, r1
     f82:	86 95       	lsr	r24
     f84:	86 95       	lsr	r24
     f86:	86 95       	lsr	r24
     f88:	88 0f       	add	r24, r24
     f8a:	28 2f       	mov	r18, r24
     f8c:	22 0f       	add	r18, r18
     f8e:	22 0f       	add	r18, r18
     f90:	82 0f       	add	r24, r18
     f92:	f9 2f       	mov	r31, r25
     f94:	f8 1b       	sub	r31, r24
     f96:	8f 2f       	mov	r24, r31
     f98:	25 c0       	rjmp	.+74     	; 0xfe4 <get_digit_time+0xd6>
		break;
	case 4:
		return systime->second/10;
     f9a:	80 91 36 03 	lds	r24, 0x0336
     f9e:	90 91 37 03 	lds	r25, 0x0337
     fa2:	fc 01       	movw	r30, r24
     fa4:	92 81       	ldd	r25, Z+2	; 0x02
     fa6:	8d ec       	ldi	r24, 0xCD	; 205
     fa8:	98 9f       	mul	r25, r24
     faa:	81 2d       	mov	r24, r1
     fac:	11 24       	eor	r1, r1
     fae:	86 95       	lsr	r24
     fb0:	86 95       	lsr	r24
     fb2:	86 95       	lsr	r24
     fb4:	17 c0       	rjmp	.+46     	; 0xfe4 <get_digit_time+0xd6>
		break;
	case 5:
		return systime->second%10;
     fb6:	80 91 36 03 	lds	r24, 0x0336
     fba:	90 91 37 03 	lds	r25, 0x0337
     fbe:	fc 01       	movw	r30, r24
     fc0:	92 81       	ldd	r25, Z+2	; 0x02
     fc2:	8d ec       	ldi	r24, 0xCD	; 205
     fc4:	98 9f       	mul	r25, r24
     fc6:	81 2d       	mov	r24, r1
     fc8:	11 24       	eor	r1, r1
     fca:	86 95       	lsr	r24
     fcc:	86 95       	lsr	r24
     fce:	86 95       	lsr	r24
     fd0:	88 0f       	add	r24, r24
     fd2:	28 2f       	mov	r18, r24
     fd4:	22 0f       	add	r18, r18
     fd6:	22 0f       	add	r18, r18
     fd8:	82 0f       	add	r24, r18
     fda:	f9 2f       	mov	r31, r25
     fdc:	f8 1b       	sub	r31, r24
     fde:	8f 2f       	mov	r24, r31
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <get_digit_time+0xd6>
		break;
	default:
		return 0;
     fe2:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
};
     fe4:	0f 90       	pop	r0
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <get_time_int>:

/*
 * get the current time as int to directly display the number
 */
unsigned int get_time_int(void)
{
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
	return (systime->minute*100)+(systime->second);
     ff4:	80 91 36 03 	lds	r24, 0x0336
     ff8:	90 91 37 03 	lds	r25, 0x0337
     ffc:	fc 01       	movw	r30, r24
     ffe:	81 81       	ldd	r24, Z+1	; 0x01
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	44 e6       	ldi	r20, 0x64	; 100
    1006:	48 9f       	mul	r20, r24
    1008:	90 01       	movw	r18, r0
    100a:	49 9f       	mul	r20, r25
    100c:	30 0d       	add	r19, r0
    100e:	11 24       	eor	r1, r1
    1010:	80 91 36 03 	lds	r24, 0x0336
    1014:	90 91 37 03 	lds	r25, 0x0337
    1018:	fc 01       	movw	r30, r24
    101a:	82 81       	ldd	r24, Z+2	; 0x02
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	82 0f       	add	r24, r18
    1022:	93 1f       	adc	r25, r19
}
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <__umulhisi3>:
    102a:	a2 9f       	mul	r26, r18
    102c:	b0 01       	movw	r22, r0
    102e:	b3 9f       	mul	r27, r19
    1030:	c0 01       	movw	r24, r0
    1032:	a3 9f       	mul	r26, r19
    1034:	70 0d       	add	r23, r0
    1036:	81 1d       	adc	r24, r1
    1038:	11 24       	eor	r1, r1
    103a:	91 1d       	adc	r25, r1
    103c:	b2 9f       	mul	r27, r18
    103e:	70 0d       	add	r23, r0
    1040:	81 1d       	adc	r24, r1
    1042:	11 24       	eor	r1, r1
    1044:	91 1d       	adc	r25, r1
    1046:	08 95       	ret

00001048 <_exit>:
    1048:	f8 94       	cli

0000104a <__stop_program>:
    104a:	ff cf       	rjmp	.-2      	; 0x104a <__stop_program>
